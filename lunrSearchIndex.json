[
  {
   "id":"Blog Posts",
   "title":"Blog Posts",
   "created": "",
   "location":"/11ty-hax11ty-blog/content/posts/",
   "description":"A Wild Blog has Appeared",
   "text":"A Wild Blog has Appeared"
  },
  {
   "id":"Getting Started with open-wc and Web Components",
   "title":"Getting Started with open-wc and Web Components",
   "created": "",
   "location":"/11ty-hax11ty-blog/content/posts/frontend-apis/",
   "description":"fetch() is an asynchronous JavaScript function that allows client-side web applications to make HTTP Requests to a web endpoint. This is most commonly used to make API calls from the browser.Asynchronous functions are known as &quot;non-blocking&quot;. Rather than taking up a processing thread while waiting for a return value, non-blocking functions allow other operations to execute in the program. This results in much more responsive applications.Fetch's asynchronous property is enables it to free the processing thread while waiting for an API response. This is a great way of handing API calls, as responses can vary in speed depending on the destination server and application.fetch('http://example.com/movies.json')  .then(response => response.json())  .then(data => console.log(data));the above example is courtesy of MozillaThe fetch method is relatively simple. In its most basic form, fetch() has one parameter, the URL of the HTTP endpoint. Other parameters can be added to send data t",
   "text":"fetch() is an asynchronous JavaScript function that allows client-side web applications to make HTTP Requests to a web endpoint. This is most commonly used to make API calls from the browser.Asynchronous functions are known as &quot;non-blocking&quot;. Rather than taking up a processing thread while waiting for a return value, non-blocking functions allow other operations to execute in the program. This results in much more responsive applications.Fetch's asynchronous property is enables it to free the processing thread while waiting for an API response. This is a great way of handing API calls, as responses can vary in speed depending on the destination server and application.fetch('http://example.com/movies.json')  .then(response => response.json())  .then(data => console.log(data));the above example is courtesy of MozillaThe fetch method is relatively simple. In its most basic form, fetch() has one parameter, the URL of the HTTP endpoint. Other parameters can be added to send data t"
  },
  {
   "id":"Getting Started with open-wc and Web Components",
   "title":"Getting Started with open-wc and Web Components",
   "created": "",
   "location":"/11ty-hax11ty-blog/content/posts/web-components-intro/",
   "description":"One month ago, I hadn't written a single line of JavaScript.I knew that JavaScript was important, but I seemed to be scared away by the massive ecosystem. As I looked deeper into the powerful things that you can do with JavaScript, I knew I had to get my feet wet. If you're looking to get started with open-wc and Web Components, you're going to need to understand the fundamentals of plain vanilla JavaScript. That might sound daunting, but getting started with Javascript is easier than you think. Today I'll show you why.JavaScript BasicsBefore starting my journey with JavaScript I had intermediate programming experience. Most of my academic career I have used Java, and I've written my personal projects in python. If you've never written any code, thats ok. We all start somewhere. Most language fundamental tutorials are beginner friendly.From a JavaScript newbie, I recommend the JavaScript Essential Training LinkedIn Learning Course. This course helped me to get an understanding od the l",
   "text":"One month ago, I hadn't written a single line of JavaScript.I knew that JavaScript was important, but I seemed to be scared away by the massive ecosystem. As I looked deeper into the powerful things that you can do with JavaScript, I knew I had to get my feet wet. If you're looking to get started with open-wc and Web Components, you're going to need to understand the fundamentals of plain vanilla JavaScript. That might sound daunting, but getting started with Javascript is easier than you think. Today I'll show you why.JavaScript BasicsBefore starting my journey with JavaScript I had intermediate programming experience. Most of my academic career I have used Java, and I've written my personal projects in python. If you've never written any code, thats ok. We all start somewhere. Most language fundamental tutorials are beginner friendly.From a JavaScript newbie, I recommend the JavaScript Essential Training LinkedIn Learning Course. This course helped me to get an understanding od the l"
  },
  {
   "id":"How to build powerful sites from scratch with 11ty",
   "title":"How to build powerful sites from scratch with 11ty",
   "created": "",
   "location":"/11ty-hax11ty-blog/content/posts/11ty/",
   "description":"If you've been interested in the web space recently, you've heard of static site generators like 11ty and Jekyll. These pieces of software take easily written markup such as markdown, nunjucks, and liquid and turn them into content that is ready for the web. Many developers want to author blog posts for their own site, and 11ty provides a way to do just that.While on the surface it seems simple, theres a lot under the hood that makes 11ty a machine.TermsBefore starting, it's important to know terms that 11ty uses to describe their files. The names sound similar, but the differentiations are important.template - a file that contains content (written in a language like markdown)layout - pre-built wrappers for templates. Used to define a common structure for a set of templates/pagesfront matter - key-value pairs at the top of a template that define specific variables that are used when rendering pages in 11tydata file - purpose built files that define variables to be inherited by all temp",
   "text":"If you've been interested in the web space recently, you've heard of static site generators like 11ty and Jekyll. These pieces of software take easily written markup such as markdown, nunjucks, and liquid and turn them into content that is ready for the web. Many developers want to author blog posts for their own site, and 11ty provides a way to do just that.While on the surface it seems simple, theres a lot under the hood that makes 11ty a machine.TermsBefore starting, it's important to know terms that 11ty uses to describe their files. The names sound similar, but the differentiations are important.template - a file that contains content (written in a language like markdown)layout - pre-built wrappers for templates. Used to define a common structure for a set of templates/pagesfront matter - key-value pairs at the top of a template that define specific variables that are used when rendering pages in 11tydata file - purpose built files that define variables to be inherited by all temp"
  },
  {
   "id":"Installation",
   "title":"Installation",
   "created": "",
   "location":"/11ty-hax11ty-blog/content/install/",
   "description":"Quick Installation Script       curl -fsSL https://raw.githubusercontent.com/elmsln/hax11ty/master/hax11tyme.sh -o hax11tyme.sh && sh hax11tyme.sh   Manual Installation   git clone https://github.com/elmsln/hax11ty.git  cd hax11ty  npm install  npm startThis is the fastest way to get up and running. If you instead want to build new sites with this and push them back up to gh-pages rapidly, start by using this repo as a template. This will copy the github actions workflows as well so all you need to do is change our repo in the git clone above to yours in order to start on what will easily become a live website!DO IT!Youll have to take a copy of the repo tho! :)",
   "text":"Quick Installation Script       curl -fsSL https://raw.githubusercontent.com/elmsln/hax11ty/master/hax11tyme.sh -o hax11tyme.sh && sh hax11tyme.sh   Manual Installation   git clone https://github.com/elmsln/hax11ty.git  cd hax11ty  npm install  npm startThis is the fastest way to get up and running. If you instead want to build new sites with this and push them back up to gh-pages rapidly, start by using this repo as a template. This will copy the github actions workflows as well so all you need to do is change our repo in the git clone above to yours in order to start on what will easily become a live website!DO IT!Youll have to take a copy of the repo tho! :)"
  },
  {
   "id":"Welcome to MaierLand!",
   "title":"Welcome to MaierLand!",
   "created": "",
   "location":"/11ty-hax11ty-blog/content/Welcome/",
   "description":"",
   "text":""
  },
  {
   "id":"this is a post (1)",
   "title":"this is a post (1)",
   "created": "",
   "location":"/11ty-hax11ty-blog/content/posts/post1/",
   "description":"not sure what this will be",
   "text":"not sure what this will be"
  }
]